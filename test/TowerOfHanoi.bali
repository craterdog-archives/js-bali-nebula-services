[
    $description: "
This class encapsulates a /Tower of Hanoi/ game with three pegs (A, B, and C) and a
parameterized number of disks. To play the game do the following:
 # Initialize a game with 3 disks.
`$game := [:]($type: <bali:/?name=bali.games.TowerOfHanoi>, $disks: 3)`
 # Play the game.
`game.play()`

The output should be:
`
 1. Move top disk on peg A to peg C
 2. Move top disk on peg A to peg B
 3. Move top disk on peg C to peg B
 4. Move top disk on peg A to peg C
 5. Move top disk on peg B to peg A
 6. Move top disk on peg B to peg C
 7. Move top disk on peg A to peg C
`
"($mediatype: "application/bsmd")
    $parameters: [
        $disks: [
            $description: "The number of disks."
            $type: Number(1..infinity)
            $default: 5
        ]
    ]
    $attributes: [
        $pegs: [
            $description: "The three pegs (A, B and C) that are used to hold the disks."
            $type: Map(Stack(Number(1..infinity)))
            $default: 5
        ]
        $steps: [
            $description: "The steps needed to move the disks."
            $type: List(Text)
        ]
    ]
    $messages: [
        $play: [
            $description: "This message causes the game to (re)initialize itself and play the game."
            $result: Map(Number(1..infinity), Text)
        ]
        $moveTower: [
            $description: "This message causes the game to move a tower of disks of a certain height from one peg to another peg using a third peg as a buffer."
            $parameters: [
                $height: [
                    $description: "The height of the tower to be moved."
                    $type: Number(1..infinity)
                ]
                $fromPeg: [
                    $description: "The peg from which the disks originate."
                    $type: Text
                ]
                $toPeg: [
                    $description: "The peg to which the disks should be moved."
                    $type: Text
                ]
                $withPeg: [
                    $description: "The peg to use to buffer the disks during the move."
                    $type: Text
                ]
            ]
        ]($private)
        $moveDisk: [
            $description: "This message causes the game to move the top disk from one peg to another."
            $parameters: [
                $fromPeg: [
                    $description: "The peg from which the disk originates."
                    $type: Text
                ]
                $toPeg: [
                    $description: "The peg to which the disk should be moved."
                    $type: Text
                ]
            ]
        ]($private)
    ]
    $procedures: [
        $play: [
            $source: {
                $pegs := [
                    "peg A": []($type: Stack)
                    "peg B": []($type: Stack)
                    "peg C": []($type: Stack)
                ]
                $steps := []
                with each $n in [disks..1] do {
                    pegs["peg A"].push(n)
                }
                target.moveTower(disks, "peg A", "peg C", "peg B")
                return steps.asMap()
            }
            $instructions: "
1.EvaluateStatement:
PUSH ELEMENT `3`
INVOKE $catalog WITH PARAMETER
PUSH ELEMENT `"peg A"`
PUSH ELEMENT `0`
INVOKE $list WITH PARAMETER
PUSH ELEMENT `1`
INVOKE $catalog WITH PARAMETER
PUSH ELEMENT `$type`
LOAD VARIABLE $Stack
INVOKE $setValue WITH 3 PARAMETERS
INVOKE $setParameters WITH 2 PARAMETERS
INVOKE $setValue WITH 3 PARAMETERS
PUSH ELEMENT `"peg B"`
PUSH ELEMENT `0`
INVOKE $list WITH PARAMETER
PUSH ELEMENT `1`
INVOKE $catalog WITH PARAMETER
PUSH ELEMENT `$type`
LOAD VARIABLE $Stack
INVOKE $setValue WITH 3 PARAMETERS
INVOKE $setParameters WITH 2 PARAMETERS
INVOKE $setValue WITH 3 PARAMETERS
PUSH ELEMENT `"peg C"`
PUSH ELEMENT `0`
INVOKE $list WITH PARAMETER
PUSH ELEMENT `1`
INVOKE $catalog WITH PARAMETER
PUSH ELEMENT `$type`
LOAD VARIABLE $Stack
INVOKE $setValue WITH 3 PARAMETERS
INVOKE $setParameters WITH 2 PARAMETERS
INVOKE $setValue WITH 3 PARAMETERS
STORE VARIABLE $pegs

2.EvaluateStatement:
PUSH ELEMENT `0`
INVOKE $list WITH PARAMETER
STORE VARIABLE $steps

3.WithStatement:
LOAD VARIABLE $disks
PUSH ELEMENT `1`
INVOKE $range WITH 2 PARAMETERS
EXECUTE $asSequential ON TARGET
EXECUTE $iterator ON TARGET
STORE VARIABLE $_iterator_1_

3.1.ConditionClause:
LOAD VARIABLE $_iterator_1_
EXECUTE $hasNext ON TARGET
JUMP TO 3.WithStatementDone ON FALSE
LOAD VARIABLE $_iterator_1_
EXECUTE $getNext ON TARGET
STORE VARIABLE $n

3.1.1.EvaluateStatement:
LOAD VARIABLE $pegs
EXECUTE $asSequential ON TARGET
PUSH ELEMENT `"peg A"`
INVOKE $getValue WITH 2 PARAMETERS
PUSH ELEMENT `1`
INVOKE $list WITH PARAMETER
LOAD VARIABLE $n
INVOKE $addItem WITH 2 PARAMETERS
EXECUTE $push ON TARGET WITH PARAMETERS
STORE VARIABLE $_result_

3.ConditionRepeat:
JUMP TO 3.1.ConditionClause

3.WithStatementDone:
SKIP INSTRUCTION

4.EvaluateStatement:
LOAD VARIABLE $target
PUSH ELEMENT `4`
INVOKE $list WITH PARAMETER
LOAD VARIABLE $disks
INVOKE $addItem WITH 2 PARAMETERS
PUSH ELEMENT `"peg A"`
INVOKE $addItem WITH 2 PARAMETERS
PUSH ELEMENT `"peg C"`
INVOKE $addItem WITH 2 PARAMETERS
PUSH ELEMENT `"peg B"`
INVOKE $addItem WITH 2 PARAMETERS
EXECUTE $moveTower ON TARGET WITH PARAMETERS
STORE VARIABLE $_result_

5.ReturnStatement:
LOAD VARIABLE $steps
EXECUTE $asMap ON TARGET
HANDLE RESULT
LOAD VARIABLE $_result_
HANDLE RESULT
"($mediatype: "application/basm")
            $bytecode: '
                2801A80128022803A8022804A80128056001B803B004B80328062803A8022804A80128056001B803
                B004B80328072803A8022804A80128056001B803B004B80380022803A802800360042804B005D001
                D00280056005D003183C6005D00480066002D0012802B0062804A8026006B007D8058007002B0000
                60082808A8026004B0072802B0072807B0072806B007D80680076003D007E8006007E800'($mediatype: "application/bcod")
        ]
        $moveTower: [
            $source: {
                $result := ""
                if height then {
                    target.moveTower(height - 1, fromPeg, withPeg, toPeg)
                    target.moveDisk(fromPeg, toPeg)
                    target.moveTower(height - 1, withPeg, toPeg, fromPeg)
                }
                return result
            }
            $instructions: "
1.EvaluateStatement:
PUSH ELEMENT `""`
STORE VARIABLE $result

2.IfStatement:
SKIP INSTRUCTION

2.1.ConditionClause:
LOAD VARIABLE $height
EXECUTE $asBoolean ON TARGET
JUMP TO 2.IfStatementDone ON FALSE

2.1.1.EvaluateStatement:
LOAD VARIABLE $target
PUSH ELEMENT `4`
INVOKE $list WITH PARAMETER
LOAD VARIABLE $height
EXECUTE $asNumeric ON TARGET
PUSH ELEMENT `1`
EXECUTE $asNumeric ON TARGET
INVOKE $difference WITH 2 PARAMETERS
INVOKE $addItem WITH 2 PARAMETERS
LOAD VARIABLE $fromPeg
INVOKE $addItem WITH 2 PARAMETERS
LOAD VARIABLE $withPeg
INVOKE $addItem WITH 2 PARAMETERS
LOAD VARIABLE $toPeg
INVOKE $addItem WITH 2 PARAMETERS
EXECUTE $moveTower ON TARGET WITH PARAMETERS
STORE VARIABLE $_result_

2.1.2.EvaluateStatement:
LOAD VARIABLE $target
PUSH ELEMENT `2`
INVOKE $list WITH PARAMETER
LOAD VARIABLE $fromPeg
INVOKE $addItem WITH 2 PARAMETERS
LOAD VARIABLE $toPeg
INVOKE $addItem WITH 2 PARAMETERS
EXECUTE $moveDisk ON TARGET WITH PARAMETERS
STORE VARIABLE $_result_

2.1.3.EvaluateStatement:
LOAD VARIABLE $target
PUSH ELEMENT `4`
INVOKE $list WITH PARAMETER
LOAD VARIABLE $height
EXECUTE $asNumeric ON TARGET
PUSH ELEMENT `1`
EXECUTE $asNumeric ON TARGET
INVOKE $difference WITH 2 PARAMETERS
INVOKE $addItem WITH 2 PARAMETERS
LOAD VARIABLE $withPeg
INVOKE $addItem WITH 2 PARAMETERS
LOAD VARIABLE $toPeg
INVOKE $addItem WITH 2 PARAMETERS
LOAD VARIABLE $fromPeg
INVOKE $addItem WITH 2 PARAMETERS
EXECUTE $moveTower ON TARGET WITH PARAMETERS
STORE VARIABLE $_result_

2.IfStatementDone:
SKIP INSTRUCTION

3.ReturnStatement:
LOAD VARIABLE $result
HANDLE RESULT
LOAD VARIABLE $_result_
HANDLE RESULT
"($mediatype: "application/basm")
            $bytecode: '
                2801800100006002D001183260032802A8016002D0022803D002B002B0036004B0036005B0036006
                B003D803800760032804A8016004B0036006B003D804800760032802A8016002D0022803D002B002
                B0036005B0036006B0036004B003D803800700006001E8006007E800'($mediatype: "application/bcod")
        ]
        $moveDisk: [
            $source: {
                $disk := pegs[fromPeg].pop()
                pegs[toPeg].push(disk)
                steps.append("Move disk {disk} from {fromPeg} to {toPeg}.")
            }
            $instructions: "
1.EvaluateStatement:
LOAD VARIABLE $pegs
EXECUTE $asSequential ON TARGET
LOAD VARIABLE $fromPeg
INVOKE $getValue WITH 2 PARAMETERS
EXECUTE $pop ON TARGET
STORE VARIABLE $disk

2.EvaluateStatement:
LOAD VARIABLE $pegs
EXECUTE $asSequential ON TARGET
LOAD VARIABLE $toPeg
INVOKE $getValue WITH 2 PARAMETERS
PUSH ELEMENT `1`
INVOKE $list WITH PARAMETER
LOAD VARIABLE $disk
INVOKE $addItem WITH 2 PARAMETERS
EXECUTE $push ON TARGET WITH PARAMETERS
STORE VARIABLE $_result_

3.EvaluateStatement:
LOAD VARIABLE $steps
PUSH ELEMENT `1`
INVOKE $list WITH PARAMETER
PUSH ELEMENT `"Move disk {disk} from {fromPeg} to {toPeg}."`
INVOKE $addItem WITH 2 PARAMETERS
EXECUTE $append ON TARGET WITH PARAMETERS
STORE VARIABLE $_result_
LOAD VARIABLE $_result_
HANDLE RESULT
"($mediatype: "application/basm")
            $bytecode: '
                6001D0016002B001D00280036001D0016004B0012801A8026003B003D803800560062801A8022802
                B003D80480056005E800'($mediatype: "application/bcod")
        ]
    ]
]($type: Class)
