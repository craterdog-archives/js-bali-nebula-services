
1.IfStatement:
SKIP INSTRUCTION

1.ConditionClause_1:
LOAD VARIABLE $a
LOAD VARIABLE $b
INVOKE INTRINSIC $less WITH 2 PARAMETERS
JUMP TO 1.ConditionClause_2 ON FALSE

1.1.EvaluateStatement:
LOAD VARIABLE $b
STORE VARIABLE $a

1.2.EvaluateStatement:
LOAD VARIABLE $c
STORE VARIABLE $b

1.3.ThrowStatement:
LOAD VARIABLE $exception
STORE VARIABLE $_exception_
JUMP TO 1.HandleClause_1

1.ClauseDone_1:
JUMP TO 1.FinishClause

1.ConditionClause_2:
LOAD VARIABLE $a
LOAD LITERAL `0`
INVOKE INTRINSIC $more WITH 2 PARAMETERS
JUMP TO 1.ElseClause ON FALSE

1.1.EvaluateStatement:
LOAD LITERAL `false`
STORE VARIABLE $_result_

1.2.EvaluateStatement:
LOAD LITERAL `<bali:/bali/types/SomeType>`
LOAD LITERAL `1`
INVOKE INTRINSIC $array WITH PARAMETER
LOAD VARIABLE $b
INVOKE INTRINSIC $addItem WITH 2 PARAMETERS
EXECUTE PROCEDURE $fibonacci WITH PARAMETERS
STORE VARIABLE $c

1.3.ReturnStatement:
LOAD VARIABLE $c
STORE VARIABLE $_result_
JUMP TO 1.FinishClause

1.ClauseDone_2:
JUMP TO 1.FinishClause

1.ElseClause:
SKIP INSTRUCTION

1.1.EvaluateStatement:
LOAD VARIABLE $b
LOAD LITERAL `1`
INVOKE INTRINSIC $array WITH PARAMETER
LOAD LITERAL `$tag`
INVOKE INTRINSIC $addItem WITH 2 PARAMETERS
EXECUTE PROCEDURE $find ON TARGET WITH PARAMETERS
STORE VARIABLE $d

1.2.EvaluateStatement:
LOAD LITERAL `(3, 4i)`
STORE VARIABLE $_result_

1.3.ReturnStatement:
JUMP TO 1.FinishClause

1.ElseDone:
JUMP TO 1.FinishClause

1.HandleClause_1:
LOAD VARIABLE $_exception_
STORE VARIABLE $exception
LOAD VARIABLE $exception
LOAD LITERAL `1`
INVOKE INTRINSIC $table WITH PARAMETER
LOAD LITERAL `$type`
LOAD LITERAL `$warning`
INVOKE INTRINSIC $setValue WITH 3 PARAMETERS
INVOKE INTRINSIC $matches WITH 2 PARAMETERS
JUMP TO 1.HandleClause_2 ON FALSE

1.1.EvaluateStatement:
LOAD VARIABLE $count
LOAD LITERAL `1`
INVOKE INTRINSIC $sum WITH 2 PARAMETERS
STORE VARIABLE $count

1.2.EvaluateStatement:
LOAD LITERAL `2`
INVOKE INTRINSIC $table WITH PARAMETER
LOAD LITERAL `$message`
LOAD LITERAL `"Something not too serious happened."`
INVOKE INTRINSIC $setValue WITH 3 PARAMETERS
LOAD LITERAL `$exception`
LOAD VARIABLE $exception
INVOKE INTRINSIC $setValue WITH 3 PARAMETERS
STORE VARIABLE $_result_

1.Handled_1:
LOAD LITERAL `none`
STORE VARIABLE $_exception_
JUMP TO 1.FinishClause

1.HandleClause_2:
LOAD VARIABLE $_exception_
STORE VARIABLE $exception
LOAD VARIABLE $exception
LOAD LITERAL `1`
INVOKE INTRINSIC $table WITH PARAMETER
LOAD LITERAL `$type`
LOAD LITERAL `$moderate`
INVOKE INTRINSIC $setValue WITH 3 PARAMETERS
INVOKE INTRINSIC $matches WITH 2 PARAMETERS
JUMP TO 1.FinishClause ON FALSE

1.1.EvaluateStatement:
LOAD LITERAL `2`
INVOKE INTRINSIC $table WITH PARAMETER
LOAD LITERAL `$message`
LOAD LITERAL `"Something serious happened."`
INVOKE INTRINSIC $setValue WITH 3 PARAMETERS
LOAD LITERAL `$exception`
LOAD VARIABLE $exception
INVOKE INTRINSIC $setValue WITH 3 PARAMETERS
STORE VARIABLE $exception

1.2.ThrowStatement:
LOAD VARIABLE $exception
STORE VARIABLE $_exception_
JUMP TO 1.HandleClause_1

1.Handled_2:
LOAD LITERAL `none`
STORE VARIABLE $_exception_

1.FinishClause:
SKIP INSTRUCTION

1.1.QueueStatement:
LOAD LITERAL `<bali:/#RSTMWSC0HFY00QJP37QD3JA533NLKPP5v3.1>`
STORE VARIABLE $_queue_1
LOAD LITERAL `4`
INVOKE INTRINSIC $array WITH PARAMETER
LOAD VARIABLE $foo
INVOKE INTRINSIC $addItem WITH 2 PARAMETERS
LOAD VARIABLE $bar
INVOKE INTRINSIC $addItem WITH 2 PARAMETERS
LOAD VARIABLE $baz
INVOKE INTRINSIC $addItem WITH 2 PARAMETERS
LOAD LITERAL `5`
INVOKE INTRINSIC $addItem WITH 2 PARAMETERS
STORE MESSAGE $_queue_1

1.2.PublishStatement:
LOAD LITERAL `2`
INVOKE INTRINSIC $table WITH PARAMETER
LOAD LITERAL `$type`
LOAD LITERAL `$confirmation`
INVOKE INTRINSIC $setValue WITH 3 PARAMETERS
LOAD LITERAL `$timestamp`
LOAD LITERAL `<bali:/bali/types/SomeType>`
EXECUTE PROCEDURE $now
INVOKE INTRINSIC $setValue WITH 3 PARAMETERS
STORE MESSAGE $_eventQueue_

2.WhileStatement:
LOAD LITERAL `true`
STORE VARIABLE $_continue_2_Outer_

2.Outer:
LOAD VARIABLE $_continue_2_Outer_
LOAD LITERAL `true`
INVOKE INTRINSIC $and WITH 2 PARAMETERS
JUMP TO 2.FinishClause ON FALSE

2.1.EvaluateStatement:
LOAD VARIABLE $bar
STORE VARIABLE $foo

2.2.IfStatement:
SKIP INSTRUCTION

2.2.ConditionClause_1:
LOAD VARIABLE $foo
JUMP TO 2.2.ElseClause ON FALSE

2.2.1.BreakStatement:
LOAD LITERAL `false`
STORE VARIABLE $_continue_2_Outer_
JUMP TO 2.2.FinishClause

2.2.ClauseDone_1:
JUMP TO 2.2.FinishClause

2.2.ElseClause:
SKIP INSTRUCTION

2.2.1.WithStatement:
LOAD VARIABLE $sequence
INVOKE INTRINSIC $createIterator WITH PARAMETER
STORE VARIABLE $_iterator_2
LOAD LITERAL `true`
STORE VARIABLE $_continue_2_2_1_LoopClause_

2.2.1.LoopClause:
LOAD VARIABLE $_continue_2_2_1_LoopClause_
LOAD VARIABLE $_iterator_2
INVOKE INTRINSIC $hasNext WITH PARAMETER
INVOKE INTRINSIC $and WITH 2 PARAMETERS
JUMP TO 2.2.1.FinishClause ON FALSE
LOAD VARIABLE $_iterator_2
INVOKE INTRINSIC $getNext WITH PARAMETER
STORE VARIABLE $item

2.2.1.1.SelectStatement:
LOAD VARIABLE $selection
STORE VARIABLE $_selector_3

2.2.1.1.OptionClause_1:
LOAD VARIABLE $_selector_3
LOAD LITERAL `$first`
INVOKE INTRINSIC $matches WITH 2 PARAMETERS
JUMP TO 2.2.1.1.OptionClause_2 ON FALSE

2.2.1.1.1.EvaluateStatement:
LOAD LITERAL `true`
STORE VARIABLE $_result_

2.2.1.1.ClauseDone_1:
JUMP TO 2.2.1.1.FinishClause

2.2.1.1.OptionClause_2:
LOAD VARIABLE $_selector_3
LOAD LITERAL `$second`
INVOKE INTRINSIC $matches WITH 2 PARAMETERS
JUMP TO 2.2.1.1.ElseClause ON FALSE

2.2.1.1.1.EvaluateStatement:
LOAD LITERAL `false`
STORE VARIABLE $_result_

2.2.1.1.ClauseDone_2:
JUMP TO 2.2.1.1.FinishClause

2.2.1.1.ElseClause:
SKIP INSTRUCTION

2.2.1.1.1.ContinueStatement:
LOAD LITERAL `false`
STORE VARIABLE $_continue_2_2_1_LoopClause_
JUMP TO 2.2.1.1.FinishClause

2.2.1.1.ElseDone:
JUMP TO 2.2.1.1.FinishClause

2.2.1.1.FinishClause:
SKIP INSTRUCTION

2.2.1.1.1.EvaluateStatement:
LOAD LITERAL `$selectDone`
STORE VARIABLE $_result_

2.2.1.RepeatLoop:
JUMP TO 2.2.1.LoopClause

2.2.1.FinishClause:
SKIP INSTRUCTION

2.2.1.1.EvaluateStatement:
LOAD LITERAL `$innerDone`
STORE VARIABLE $_result_

2.2.ElseDone:
JUMP TO 2.2.FinishClause

2.2.FinishClause:
SKIP INSTRUCTION

2.2.1.EvaluateStatement:
LOAD LITERAL `$ifDone`
STORE VARIABLE $_result_

2.RepeatLoop:
JUMP TO 2.Outer

2.FinishClause:
SKIP INSTRUCTION

2.1.EvaluateStatement:
LOAD LITERAL `$outerDone`
STORE VARIABLE $_result_

