
1.IfClause:
SKIP INSTRUCTION

1.1.ConditionBlock:
LOAD VARIABLE $a
LOAD VARIABLE $b
INVOKE INTRINSIC $less WITH 2 PARAMETERS
JUMP TO 1.2ConditionBlock ON FALSE

1.1.1.EvaluateClause:
LOAD VARIABLE $b
STORE VARIABLE $a

1.1.2.EvaluateClause:
LOAD VARIABLE $c
STORE VARIABLE $b

1.1.3.ThrowClause:
LOAD VARIABLE $exception
STORE VARIABLE $_exception_
JUMP TO 1.1.4.BlockEnd

1.1.4.BlockEnd:
JUMP TO 1.FinishClause

1.2.ConditionBlock:
SKIP INSTRUCTION

1.2.1.EvaluateClause:
LOAD VARIABLE $b
STORE VARIABLE $a

1.2.2.EvaluateClause:
LOAD VARIABLE $c
STORE VARIABLE $b

1.2.3.ThrowClause:
LOAD VARIABLE $exception
STORE VARIABLE $_exception_
JUMP TO 1.2.4.BlockEnd

1.2.4.BlockEnd:
JUMP TO 1.3.ElseBlock ON FALSE
LOAD VARIABLE $a
LOAD LITERAL `0`
INVOKE INTRINSIC $more WITH 2 PARAMETERS
JUMP TO 1.FinishClause

1.3.ElseBlock:
SKIP INSTRUCTION

1.3.1.EvaluateClause:
LOAD VARIABLE $b
EXECUTE PROCEDURE $find ON TARGET
STORE VARIABLE $d

1.3.2.EvaluateClause:
LOAD LITERAL `(3, 4i)`
STORE VARIABLE $_result_

1.3.3.ReturnClause:
JUMP TO 1.3.4.BlockEnd

1.3.4.BlockEnd:
SKIP INSTRUCTION

1.HandleClauses:
LOAD VARIABLE $_exception_
JUMP TO 1.FinishClause ON NONE
LOAD VARIABLE $_exception_

1.4.HandleClause:
STORE VARIABLE $exception
LOAD VARIABLE $exception
LOAD LITERAL `1`
INVOKE INTRINSIC $table WITH PARAMETER
LOAD LITERAL `$type`
LOAD LITERAL `$warning`
INVOKE INTRINSIC $setValue WITH 3 PARAMETERS
INVOKE INTRINSIC $matches WITH 2 PARAMETERS
JUMP TO 1.4.ClauseEnd ON FALSE

1.4.1.EvaluateClause:
LOAD VARIABLE $count
LOAD LITERAL `1`
INVOKE INTRINSIC $sum WITH 2 PARAMETERS
STORE VARIABLE $count

1.4.2.EvaluateClause:
LOAD LITERAL `2`
INVOKE INTRINSIC $table WITH PARAMETER
LOAD LITERAL `$message`
LOAD LITERAL `"Something not too serious happened."`
INVOKE INTRINSIC $setValue WITH 3 PARAMETERS
LOAD LITERAL `$exception`
LOAD VARIABLE $exception
INVOKE INTRINSIC $setValue WITH 3 PARAMETERS
STORE VARIABLE $_result_

1.4.3.BlockEnd:
LOAD LITERAL `none`
STORE VARIABLE $_exception_

1.4.ClauseEnd:
LOAD VARIABLE $_exception_
JUMP TO 1.FinishClause ON NONE
LOAD VARIABLE $_exception_

1.5.HandleClause:
STORE VARIABLE $exception
LOAD VARIABLE $exception
LOAD LITERAL `1`
INVOKE INTRINSIC $table WITH PARAMETER
LOAD LITERAL `$type`
LOAD LITERAL `$moderate`
INVOKE INTRINSIC $setValue WITH 3 PARAMETERS
INVOKE INTRINSIC $matches WITH 2 PARAMETERS
JUMP TO 1.5.ClauseEnd ON FALSE

1.5.1.EvaluateClause:
LOAD LITERAL `2`
INVOKE INTRINSIC $table WITH PARAMETER
LOAD LITERAL `$message`
LOAD LITERAL `"Something serious happened."`
INVOKE INTRINSIC $setValue WITH 3 PARAMETERS
LOAD LITERAL `$exception`
LOAD VARIABLE $exception
INVOKE INTRINSIC $setValue WITH 3 PARAMETERS
STORE VARIABLE $exception

1.5.2.ThrowClause:
LOAD VARIABLE $exception
STORE VARIABLE $_exception_
JUMP TO 1.5.3.BlockEnd

1.5.3.BlockEnd:
LOAD LITERAL `none`
STORE VARIABLE $_exception_

1.5.ClauseEnd:
SKIP INSTRUCTION

1.FinishClause:
SKIP INSTRUCTION

1.6.1.QueueClause:
LOAD LITERAL `<bali:/#RSTMWSC0HFY00QJP37QD3JA533NLKPP5v3.1>`
STORE VARIABLE $_queue_1
LOAD LITERAL `4`
INVOKE INTRINSIC $array WITH PARAMETER
LOAD VARIABLE $foo
INVOKE INTRINSIC $addItem WITH 2 PARAMETERS
LOAD VARIABLE $bar
INVOKE INTRINSIC $addItem WITH 2 PARAMETERS
LOAD VARIABLE $baz
INVOKE INTRINSIC $addItem WITH 2 PARAMETERS
LOAD LITERAL `5`
INVOKE INTRINSIC $addItem WITH 2 PARAMETERS
STORE MESSAGE $_queue_1

1.6.2.PublishClause:
LOAD LITERAL `2`
INVOKE INTRINSIC $table WITH PARAMETER
LOAD LITERAL `$type`
LOAD LITERAL `$confirmation`
INVOKE INTRINSIC $setValue WITH 3 PARAMETERS
LOAD LITERAL `$timestamp`
LOAD LITERAL `<bali:/bali/types/SomeType>`
EXECUTE PROCEDURE $now
INVOKE INTRINSIC $setValue WITH 3 PARAMETERS
STORE MESSAGE $_eventQueue_

1.6.3.BlockEnd:
SKIP INSTRUCTION

2.WhileClause:
LOAD LITERAL `true`
STORE VARIABLE $_continue_Outer

2.1.Outer:
LOAD VARIABLE $_continue_Outer
LOAD LITERAL `true`
INVOKE INTRINSIC $and WITH 2 PARAMETERS
JUMP TO 2.FinishClause ON FALSE

2.1.1.EvaluateClause:
LOAD VARIABLE $bar
STORE VARIABLE $foo

2.1.2.IfClause:
SKIP INSTRUCTION

2.1.2.1.ConditionBlock:
LOAD VARIABLE $foo
JUMP TO 2.1.2.2.ElseBlock ON FALSE

2.1.2.1.1.BreakClause:
LOAD LITERAL `false`
STORE VARIABLE $_continue_Outer
JUMP TO 2.1.2.1.2.BlockEnd

2.1.2.1.2.BlockEnd:
JUMP TO 2.1.2.FinishClause

2.1.2.2.ElseBlock:
SKIP INSTRUCTION

2.1.2.2.1.WithClause:
LOAD VARIABLE $sequence
INVOKE INTRINSIC $createIterator WITH PARAMETER
STORE VARIABLE $_iterator_2
LOAD LITERAL `true`
STORE VARIABLE $_continue_WithItem

2.1.2.2.1.1.WithItem:
LOAD VARIABLE $_continue_WithItem
LOAD VARIABLE $_iterator_2
INVOKE INTRINSIC $hasNext WITH PARAMETER
INVOKE INTRINSIC $and WITH 2 PARAMETERS
JUMP TO 2.1.2.2.1.FinishClause ON FALSE
LOAD VARIABLE $_iterator_2
INVOKE INTRINSIC $getNext WITH PARAMETER
STORE VARIABLE $item

2.1.2.2.1.1.1.SelectClause:
LOAD VARIABLE $selection
STORE VARIABLE $_selector_3

2.1.2.2.1.1.1.1.OptionBlock:
LOAD VARIABLE $_selector_3
LOAD LITERAL `$first`
INVOKE INTRINSIC $matches WITH 2 PARAMETERS
JUMP TO 2.1.2.2.1.1.1.2OptionBlock ON FALSE

2.1.2.2.1.1.1.1.1.EvaluateClause:
LOAD LITERAL `true`
STORE VARIABLE $_result_

2.1.2.2.1.1.1.1.2.BlockEnd:
JUMP TO 2.1.2.2.1.1.1.FinishClause

2.1.2.2.1.1.1.3.ElseBlock:
SKIP INSTRUCTION

2.1.2.2.1.1.1.2.1.ContinueClause:
LOAD LITERAL `false`
STORE VARIABLE $_continue_WithItem
JUMP TO 2.1.2.2.1.1.1.2.2.BlockEnd

2.1.2.2.1.1.1.2.2.BlockEnd:
SKIP INSTRUCTION

2.1.2.2.1.1.1.FinishClause:
SKIP INSTRUCTION

2.1.2.2.1.1.1.3.1.EvaluateClause:
LOAD LITERAL `$selectDone`
STORE VARIABLE $_result_

2.1.2.2.1.1.1.3.2.BlockEnd:
SKIP INSTRUCTION

2.1.2.2.1.1.2.BlockEnd:
JUMP TO WithItem

2.1.2.2.1.FinishClause:
SKIP INSTRUCTION

2.1.2.2.1.2.1.EvaluateClause:
LOAD LITERAL `$innerDone`
STORE VARIABLE $_result_

2.1.2.2.1.2.2.BlockEnd:
SKIP INSTRUCTION

2.1.2.2.2.BlockEnd:
SKIP INSTRUCTION

2.1.2.FinishClause:
SKIP INSTRUCTION

2.1.2.3.1.EvaluateClause:
LOAD LITERAL `$ifDone`
STORE VARIABLE $_result_

2.1.2.3.2.BlockEnd:
SKIP INSTRUCTION

2.1.3.BlockEnd:
JUMP TO Outer

2.FinishClause:
SKIP INSTRUCTION

2.2.1.EvaluateClause:
LOAD LITERAL `$outerDone`
STORE VARIABLE $_result_

2.2.2.BlockEnd:
SKIP INSTRUCTION

3.BlockEnd:
SKIP INSTRUCTION

